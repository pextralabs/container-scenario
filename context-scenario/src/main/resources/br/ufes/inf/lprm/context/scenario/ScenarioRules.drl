package br.ufes.inf.lprm.context.scenario;

import br.ufes.inf.lprm.context.model.*;

import java.util.List;
import java.lang.Double;
import java.lang.Long;
import java.util.HashSet
import java.util.Arrays
import java.util.Set;
import org.kie.api.time.SessionClock
import java.time.LocalDateTime
import java.time.Instant
import java.util.TimeZone
import br.ufes.inf.lprm.context.model.ContextValue
import java.net.URI

global SessionClock clock;

rule SpeedUpdate
    no-loop
    when
        location: Location(bearer: bearer)
        Person(this == bearer, speed: speed)
        readings: List() from accumulate(
                r: ContextValue(cid == location.cid) over window:time( 2m ),
                collectList(r)
        )
    then
        ContextValue $update = new ContextValue<>(Speed.computeSpeed(readings), speed.getCid(), clock.getCurrentTime());
        insert($update);
    end


rule TimeToThresholdUpdate
    no-loop
    when
        temperature: Temperature(bearer: bearer)
        batch: Batch(container == bearer, ttt: ttt)
        readings: List(size > 0) from accumulate(
            r: ContextValue(cid == temperature.cid),
            collectList(r)
        )
    then
        LocalDateTime now = LocalDateTime.ofInstant(Instant.ofEpochMilli(clock.getCurrentTime()), TimeZone.getDefault().toZoneId());
        ContextValue $update = new ContextValue<>(
                TimeToThreshold.computeTTT(readings, batch.getProductType(), now), ttt.getCid(), clock.getCurrentTime()
        );
        insert($update);
    end

rule EstimateTimeOfArrivalInsert
    no-loop
    when
        person: Person()
        batch: Batch()
        container: Container() from batch.container
        Watch(watcher == person, target == batch)
    then
        EstimateTimeOfArrival $eta = new EstimateTimeOfArrival(
                "eta-" + person.getEid() + "-" + batch.getEid(),
                new HashSet<>(Arrays.asList(person, container))
                );
        insertLogical($eta);
    end

rule EstimateTimeOfArrivalUpdate
    no-loop
    when
        person: Person()
        batch: Batch()
        container: Container() from batch.container
        eta: EstimateTimeOfArrival(person memberOf entities, container memberOf entities)
        Location(this == person.location)
        Location(this == container.location)
    then
        ContextValue $update = new ContextValue<>(EstimateTimeOfArrival.computeETA(person, container), eta.getCid(), clock.getCurrentTime());
        insert($update);
    end
