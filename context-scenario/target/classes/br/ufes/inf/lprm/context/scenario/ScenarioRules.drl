package co.pextra.scenarios.SensitiveProductStorage;

import co.pextra.model.*;

import java.util.List;
import java.lang.Double;
import java.lang.Long;
import java.util.Date;
import br.ufes.inf.lprm.scene.model.Situation;
import br.ufes.inf.lprm.situation.bindings.*;
import br.ufes.inf.lprm.situation.model.Participation;
import br.ufes.inf.lprm.situation.model.SituationType
import br.ufes.inf.lprm.scene.util.SituationHelper
import java.util.HashSet
import java.util.Arrays
import java.util.Set;
import org.kie.api.time.SessionClock
import java.time.LocalDateTime
import java.time.Instant
import java.util.TimeZone;

global SessionClock clock;

rule SpeedUpdate
    no-loop
    when
        location: Location(bearer: bearer)
        Person(this == bearer, speed: speed)
        readings: List() from accumulate(
                r: Reading(id == location.id) over window:time( 2m ),
                collectList(r)
        )
    then
        speed.setValue(Speed.computeSpeed(readings));
        retract(speed);
        insert(speed);
    end


rule TimeToThresholdUpdate
    no-loop
    when
        temperature: Temperature(bearer: bearer)
        batch: Batch(container == bearer, ttt: ttt)
        readings: List(size > 0) from accumulate(
            r: Reading(id == temperature.id),
            collectList(r)
        )
    then
        LocalDateTime now = LocalDateTime.ofInstant(Instant.ofEpochMilli(clock.getCurrentTime()), TimeZone.getDefault().toZoneId());
        ttt.setValue(TimeToThreshold.computeTTT(readings, batch.getProductType(), now));
        update(ttt);
    end

rule EstimateTimeOfArrivalInsert
    no-loop
    when
        person: Person()
        batch: Batch()
        container: Container() from batch.container
        Watch(watcher == person, target == batch)
    then
        EstimateTimeOfArrival eta = new EstimateTimeOfArrival(person.getId() + "-" + batch.getId(), person, container);
        insertLogical(eta);
    end

rule EstimateTimeOfArrivalUpdate
    no-loop
    when
        person: Person()
        batch: Batch(container: container)
        eta: EstimateTimeOfArrival(person memberOf entities, container memberOf entities)
        Location(this == person.location)
        Location(this == container.location)
    then
        eta.setValue(EstimateTimeOfArrival.computeETA(person, container));
        update(eta);
    end

declare ETABiggerThanTTT extends Situation
  person: Person @part @key
  container: Container @part @key
  eta: EstimateTimeOfArrival @part @key
  ttt: TimeToThreshold @part @key
end
rule ETABiggerThanTTT
 @role(situation) @type(ETABiggerThanTTT)
  when
    person: Person()
    batch: Batch(container: container)
    ttt: TimeToThreshold(bearer == batch)
    eta: EstimateTimeOfArrival(person memberOf entities, container memberOf entities, value > ttt.value)
  then
    SituationHelper.situationDetected(drools);
end

declare AllETABiggerThanTTT extends Situation
    batch: Batch @part @key
end
rule AllETABiggerThanTTT
 @role(situation) @type(AllETABiggerThanTTT)
  when
    Watch(person: watcher, batch: target)
    forall (
        Watch(person == watcher, batch == target)
        ETABiggerThanTTT(person == person, active)
    )
  then
  SituationHelper.situationDetected(drools);
end
