package co.pextra.scenarios.SensitiveProductStorage2;

import java.util.List
import co.pextra.model2.Reading
import java.lang.Double
import java.lang.Long
import java.util.Date;
import org.drools.core.time.SessionPseudoClock;
import br.ufes.inf.lprm.scene.model.Situation;
import br.ufes.inf.lprm.situation.bindings.*;
import br.ufes.inf.lprm.situation.model.Participation;
import br.ufes.inf.lprm.situation.model.SituationType
import br.ufes.inf.lprm.scene.util.SituationHelper
import co.pextra.scenarios.SensitiveProductStorage.EstimateTimeOfArrival;

global SessionPseudoClock clock;

rule PerceivedIntrinsicContextUpdate2
    no-loop
    when
        context: co.pextra.model2.Context()
        reading: co.pextra.model2.Reading(id == context.id)
    then
        context.setValue(reading);
        retract(context);
        insert(context);
    end


rule SpeedUpdate2
    no-loop
    when
        location: Location(bearer: bearer)
        Person(this == bearer, speed: speed)
        readings: List() from accumulate(
                r: co.pextra.model2.Reading(id == location.id) over window:time( 2m ),
                collectList(r)
        )
    then
        speed.setValue(Speed.computeSpeed(readings));
        retract(speed);
        insert(speed);
    end


rule TimeToThresholdUpdate2
    no-loop
    when
        temperature: Temperature(bearer: bearer)
        batch: Batch(container == bearer, ttt: ttt)
        readings: List(size > 0) from accumulate(
            r: co.pextra.model2.Reading(id == temperature.id),
            collectList(r)
        )
    then
        ttt.setValue(TimeToThreshold.computeTTT(readings, batch.getProductType()));
        update(ttt);
    end

rule EstimateTimeOfArrivalInsert2
    no-loop
    when
        person: Person()
        batch: Batch()
        container: Container() from batch.container
        Watch(watcher == person, target == batch)
        Location(this == person.location || this == container.location)
    then
        System.out.println("----------------------------------------- EstimateTimeOfArrivalInsert2");
        EstimateTimeOfArrival eta = new EstimateTimeOfArrival("", person, container);
    end

//rule EstimateTimeOfArrivalUpdate2
//    no-loop
//    when
//        person: Person()
//        batch: Batch(container: container)
//        eta: EstimateTimeOfArrival(person memberOf entities, container memberOf entities)
//        Watch(watcher == person, target == batch)
//        Location(this == person.location)
//        Location(this == container.location)
//    then
//        eta.setValue(EstimateTimeOfArrival.computeETA(person, container));
//        update(eta);
//    end

//declare ETABiggerThanTTT2 extends Situation
//  eta: EstimateTimeOfArrival @part @key
//  ttt: TimeToThreshold @part @key
//end
//rule ETABiggerThanTTT2
// @role(situation) @type(ETABiggerThanTTT2)
//  when
//    person: Person()
//    batch: Batch(container: container)
//    ttt: TimeToThreshold(bearer == batch)
//    eta: EstimateTimeOfArrival(person memberOf entities, container memberOf entities, value > ttt.value)
//  then
//    SituationHelper.situationDetected(drools);
//end